package com.cs206.g2t2.service.serviceImpl;

import com.cs206.g2t2.data.request.team.TeamCreationRequest;
import com.cs206.g2t2.data.response.Response;
import com.cs206.g2t2.data.response.common.SuccessResponse;
import com.cs206.g2t2.exceptions.badRequest.DuplicatedTeamNameException;
import com.cs206.g2t2.exceptions.notFound.TeamNotFoundException;
import com.cs206.g2t2.exceptions.notFound.UserNotFoundException;
import com.cs206.g2t2.models.BsTeam;
import com.cs206.g2t2.models.TeamMember;
import com.cs206.g2t2.models.User;
import com.cs206.g2t2.repository.BsTeamRepository;
import com.cs206.g2t2.repository.UserRepository;
import com.cs206.g2t2.service.services.BsTeamService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;

@Service
@RequiredArgsConstructor
public class BsTeamServiceImpl implements BsTeamService {

    private final UserRepository userRepository;
    private final BsTeamRepository bsTeamRepository;

    private BsTeam saveAndReturnBsTeamInRepository(TeamCreationRequest request)
            throws DuplicatedTeamNameException, TeamNotFoundException{

        //Stores username in a variable
        String teamName = request.getTeamName();

        //Checks if Team's team name already exists in database
        if (bsTeamRepository.findByTeamName(teamName).isPresent()) {
            throw new DuplicatedTeamNameException(teamName);
        }

        //Creates bsTeam from TeamCreationRequest
        BsTeam bsTeam = BsTeam.builder()
                .teamName(request.getTeamName())
                .region(request.getRegion())
                .maximumTeamSize(request.getMaximumTeamSize())
                .imageString(null)
                .trophyRequirements(0)
                .min3v3Wins(0)
                .minDuoWins(0)
                .minSoloWins(0)
                .memberList(new ArrayList<TeamMember>())
                .build();

        //Saves bsTeam into repository
        bsTeamRepository.save(bsTeam);

        //Returns bsTeam stored in repository to caller
        return bsTeamRepository.findByTeamName(teamName).orElseThrow(() -> new TeamNotFoundException(teamName));
    }

    @Override
    public Response createBsTeam(TeamCreationRequest request, String username) throws UserNotFoundException {

        //Find user from userRepository
        User user = userRepository.findByUsername(username).orElseThrow(() -> new UserNotFoundException(username));
        TeamMember teamMember = TeamMember.builder()
                .userId(user.get_id())
                .role(TeamMember.Role.ADMIN)
                .joinDate(LocalDateTime.now())
                .build();

        //Obtains bsTeam from repository (Contains autogenerated _id)
        BsTeam bsTeam = saveAndReturnBsTeamInRepository(request);

        //Save the teamId into user's list of teamsId
        user.getTeams().add(bsTeam.get_id());

        //Save the teamMember into bsTeam
        bsTeam.getMemberList().add(teamMember);

        //Save both bsTeam and user into respective repository
        userRepository.save(user);
        bsTeamRepository.save(bsTeam);

        return SuccessResponse.builder()
                .message("Team has been created successfully")
                .build();
    }
}
